
public class Sorting {
	
	public static class HeapSort{
		
		static int size;
		
		public static long sort(int[] arr){
			long time = System.nanoTime();
			heapify(arr);
			for(int i = size; i> 0; i--){
				size = size - 1;
				maxHeap(arr, 0);
			}
			for(int i = 0; i < arr.length; i++){
				System.out.print(arr[i]);
			}
			return System.nanoTime() - time;
		}
		public static void heapify(int[] arr){
			size = arr.length -1;
			for(int i = size/2; i>= 0; i--){
					maxHeap(arr,i);
			}
		}
		public static void maxHeap(int[] arr, int i){
			int left = 2*i;
			int right = 2*i + 1;
			int max = i;
			if(left <= size && arr[left] > arr[i]){
				max = left;
			}
			if(right <= size && arr[right] > arr[max]){
				max = right;
			}
			if(max != i){
				swap(arr, i, max);
				maxHeap(arr, max);
			}
		}
		public static void swap(int[] arr, int i, int j){
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
	}
	public static void main(String[] args){
		int[] arr = {2, 4, 5, 6, 1, 4, 9, 3, 5, 8};
		HeapSort.sort(arr);
	}
}
